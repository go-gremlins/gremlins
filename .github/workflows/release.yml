name: release
on:
  push:
    tags: [ 'v*' ]

permissions:
  contents: write
  packages: write

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Fetch all tags
        run: git fetch --force --tags
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          distribution: goreleaser
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_PAT }}
  documentation:
    if: ${{ github.event_name != 'pull_request' }}
    needs: [ goreleaser ]
    steps:
      - name: Set version env
        # This strips the patch version (ex. v1.2.3 -> v1.2) and sets it to GR_MINOR_VERSION
        # And also sets the patch version to GR_PATCH_VERSION
        run: |
          echo "GR_MINOR_VERSION=$(echo $GITHUB_REF | cut -d '.' -f 1,2)" >> $GITHUB_ENV
          echo "GR_PATCH_VERSION=$(echo $GITHUB_REF | cut -d '.' -f 3)" >> $GITHUB_ENV
      - name: Build latest documentation
        if: ${{ env.GR_PATCH_VERSION == "0" }}
        uses: ./.github/workflows/docs.yml
        with:
          version: ${{ env.GR_MINOR_VERSION }}
          default: true
      - name: Build patch documentation
        if: ${{ env.GR_PATCH_VERSION != "0" }}
        uses: ./.github/workflows/docs.yml
        with:
          version: ${{ env.GR_MINOR_VERSION }}
          default: false
