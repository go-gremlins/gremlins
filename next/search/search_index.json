{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-gremlins","title":"Welcome to Gremlins","text":"<p>Gremlins is a mutation testing tool for Go. It has been made to work well on smallish Go modules, for example microservices, on which it helps validate the test suite, aids the TDD process and can be used as a CI quality gate.</p> <p>As of now, Gremlins doesn't work very well on very big Go modules, mainly because a run can take hours to complete.</p> <p></p> <p>Warning</p> <p>Gremlins is still in its 0.x.x release, which, as per SemVer, doesn't guarantee backward compatibility. What this  means for Gremlins is that configuration flags and/or configuration files can change among minor releases. This may be important if you use Gremlins in automated builds, for example in continuous integration pipelines.</p> <p>Also, while in 0.x.x releases, only the current minor release will be maintained; if we are in v0.2.0, no patch releases will be provided for the v0.1.0 line. Once Gremlins will reach it's 1.x.x release, it will start to be backward compatible, and we'll decide how many releases to maintain at the same time (ex. up to two minors before, as Go itself does).</p>"},{"location":"#what-is-mutation-testing","title":"What is Mutation Testing","text":"<p>Code coverage is unreliable as a measure of test quality. It is too easy to have tests that exercise a piece of code but don't test anything at all. Mutation testing works by mutating the code exercised by the tests and verifying if the mutation is caught by the test suite. Imagine gremlins going into your code and messing around: will your test suit catch their damage?</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Discovers mutant candidates and tests them</li> <li>Only tests mutants covered by tests</li> <li>Can test mutants only in PR changes</li> <li>Supports five mutant types</li> <li>Yaml-based configuration</li> <li>Can run as quality gate on CI</li> </ul>"},{"location":"CONTRIBUTING/","title":"Contributing to Gremlins","text":"<p>First, thanks for you wanting to contribute, the Gremlins project welcomes contributors!</p>"},{"location":"CONTRIBUTING/#what-can-i-contribute","title":"What can I contribute?","text":""},{"location":"CONTRIBUTING/#report-bugs","title":"Report bugs","text":"<p>Bug reports are always welcome. Before submitting one, please verify that a similar bug hasn't been already reported. If it already exists, consider to comment there instead of opening a new one.</p>"},{"location":"CONTRIBUTING/#to-submit-a-good-bug-report","title":"To submit a good bug report","text":"<p>Use the appropriate template to submit bugs.</p> <ul> <li>Use a clear and descriptive title.</li> <li>Describe each step to reproduce using as much detail as you can.</li> <li>Describe the behaviour you observed after following the steps.</li> <li>Explain why it is different from the behaviour you would expect.</li> </ul>"},{"location":"CONTRIBUTING/#suggest-enhancements","title":"Suggest enhancements","text":"<p>Before making a feature request/enhancement request, please verify that there isn't already a request for the same or very similar feature. If a similar enhancement request already exists, you can expand on it via comments. There is a specific issue type for feature requests.</p>"},{"location":"CONTRIBUTING/#send-pull-requests","title":"Send pull requests","text":"<p>Pull request are welcome, but it's not guaranteed they will be accepted. We are quite strict on code quality, style and code metrics, bear with us if we ask you to make changes before accepting your PR.</p>"},{"location":"CONTRIBUTING/#becoming-a-contributor","title":"Becoming a contributor","text":"<p>Gremlins is fully developed on GitHub and the best way to contribute is by forking the repository and, once you complete your work, opening a pull request.</p>"},{"location":"CONTRIBUTING/#before-contributing","title":"Before contributing","text":"<p>All contributions are welcome, but, before submitting any significant change, it is better to coordinate with the Gremlins' team before starting the work. It is a good idea to start at the issue tracker and file a new issue or claim an existing one.</p>"},{"location":"CONTRIBUTING/#open-an-issue","title":"Open an issue","text":"<p>Apart from trivial changes, every contribution to the Gremlins should be linked to an issue. Feel free to propose a change and expose your plans, so that everyone can contribute in its validation, and the chances of your pull request being accepted will increase.</p>"},{"location":"CONTRIBUTING/#submit-a-contribution","title":"Submit a contribution","text":"<p>Gremlins is released with semantic versioning and follows GitHub flow, with the only difference that we open release branches when there is a fix version to release.</p> <p>When you open a pull request, a series of automatic checks kicks off. You can verify if your change makes those checks fail and adjust the code accordingly.</p> <p>At this point, a member of the Gremlins team will review your code, possibly will discuss with you to understand it better, maybe ask for some changes and so on. Please expect that this process will be more thorough if you are a first time contributor: we need to know each other.</p> <p>Feel free to make more than one commit in your pull request, but bear in mind that once it has been properly reviewed and accepted, all the commits will be squashed into one before merging. This way we can maintain a linear commit history.</p> <p>Before a release, the code base will be frozen and no pull request will be accepted until the release is done, with the only exception of bug fixes. If you send a pull request during a code freeze, you will have to wait a little more before seeing it merged.</p>"},{"location":"CONTRIBUTING/#commit-messages","title":"Commit messages","text":"<p>Commit messages follow a convention. Here is an example:</p> <pre><code>area: do a specific thing\n\nExpand on what and how it is done, possibly spanning multiple lines and\nbeing descriptive.\n\nFixes #123\n</code></pre>"},{"location":"CONTRIBUTING/#first-line","title":"First line","text":"<p>This is a short one line summary of what has been done in the commit, prefixed by the package affected (ex. <code>mutator</code> , <code>docs</code>, etc.). The commit message should be written as it is answering the question \"This commit changes Gremlins to ...\"</p> <p>The first line is separated from the rest by a blank line.</p>"},{"location":"CONTRIBUTING/#message-body","title":"Message body","text":"<p>The message body expands on the first line, adding details in a descriptive way. Try to use correct grammar and punctuation, and don't use Markdown, HTML or other markup languages.</p>"},{"location":"CONTRIBUTING/#reference","title":"Reference","text":"<p>If the commit is related to an issue (most of the time it does), you can add a reference in the format <code>KEYWORD #ISSUE_NUMBER</code>. This helps GitHub link the commit to the appropriate issue and update its status.</p> <p>The recognized keywords are:</p> <ul> <li>close</li> <li>closes</li> <li>closed</li> <li>fix</li> <li>fixes</li> <li>fixed</li> <li>resolve</li> <li>resolves</li> <li>resolved</li> </ul> <p>Sometimes the team members as well forget to respect all of these rules, but we do our best to be consistent. If you forget or make mistakes, we will help during the review process.</p>"},{"location":"install/","title":"Install","text":"<p>Gremlins can be installed via pre-compiled binaries or from source.</p>"},{"location":"install/#pre-compiled-binaries","title":"Pre compiled binaries","text":""},{"location":"install/#linux","title":"Linux","text":"<p>We don't have public repositories yet. To install, you have to download the package appropriate to your architecture/OS and install it \"manually\".</p>  deb rpm <p>Download a <code>.deb</code> file appropriate for your ARCH from the release page, then install with:</p> <pre><code>dpkg -i gremlins_X.Y.Z_linux_amd64.deb\n</code></pre> <p>Download a <code>.rpm</code> file appropriate for your ARCH from the release page, then install with:</p> <pre><code>rpm -i gremlins_X.Y.Z_linux_amd64.rpm\n</code></pre>"},{"location":"install/#macos","title":"MacOS","text":"<p>On macOS, you can use Homebrew. As of now, Gremlins uses only an Homebrew tap.</p> <p>To install, you have to first tap Gremlins' repository:</p> <pre><code>brew tap go-gremlins/tap #(1)\n</code></pre> <ol> <li>Doing this, your tap will refer directly to the Gremlins' tap formula on GitHub. You can delete the tap by    \"untapping\" it:    <pre><code>brew untap go-gremlins/tap\n</code></pre></li> </ol> <p>Then you can install it:</p> <pre><code>brew install gremlins\n</code></pre>"},{"location":"install/#windows","title":"Windows","text":"<p>As of now, only manual installation is supported. Download the appropriate release package from the release page, extract the zip archive and copy the <code>.exe</code> file somewhere in your execution <code>PATH</code>.</p>"},{"location":"install/#docker","title":"Docker","text":"<p>You can also run Gremlins using the official Docker image:</p> <pre><code>docker run --rm -v $(pwd):/app -w /app gogremlins/gremlins gremlins unleash .\n</code></pre>"},{"location":"install/#manual-install","title":"Manual install","text":"<p>Alternatively, you can download the binary for your OS/ARCH, untar it.</p> <p>For example, on GNU/Linux it could be:</p> <pre><code>tar -xvf gremlins_X.Y.Z_linux_amd64.tar.gz\n</code></pre> <p>then copy it somewhere in <code>PATH</code>:</p> <pre><code>sudo cp gremlins_X.Y.Z_linux_amd64/gremlins /usr/bin\n</code></pre>"},{"location":"install/#from-source","title":"From source","text":""},{"location":"install/#go-install","title":"Go install","text":"<p>Gremlins can be installed with the Go install command. Only the Go compiler is needed.</p> <pre><code>go install github.com/go-gremlins/gremlins/cmd/gremlins@vX.Y.Z\n</code></pre>"},{"location":"install/#ninja-style","title":"Ninja style","text":"<p>To build Gremlins you need the Go compiler, <code>make</code> and golangci-lint for linting. You can clone download the source tarball from the release page, then:</p> <pre><code>tar -xvf gremlins-X.Y.Z.tar.gz\n</code></pre> <p>Ad then:</p> <pre><code>cd gremlins-X.Y.Z\n</code></pre> <pre><code>make\n</code></pre> <p>At this point, you can move the generated binary executable to a location of your choice.</p>"},{"location":"quick-start/","title":"Quick start","text":"<p>To execute a mutation test run, from the root of a Go module execute:</p> <pre><code>$ gremlins unleash #(1)\n</code></pre> <ol> <li>If <code>unleash</code> is too long to type for you, you can use <code>run</code> or <code>r</code> which will do the same.</li> </ol> <p>Gremlins only tests mutations of parts of the code already covered by test cases. If a mutant is not covered, why bother testing? You already know it will not be caught. In any case, Gremlins will report which mutations aren't covered.</p> <p>Gremlins will report each mutation as:</p> <ul> <li><code>RUNNABLE</code>: In dry-run mode, a mutation that can be tested.</li> <li><code>NOT COVERED</code>: A mutation not covered by tests; it will not be tested.</li> <li><code>KILLED</code>: The mutation has been caught by the test suite.</li> <li><code>LIVED</code>: The mutation hasn't been caught by the test suite.</li> <li><code>TIMED OUT</code>: The tests timed out while testing the mutation: the mutation actually made the tests fail, but not   explicitly.</li> <li><code>NOT VIABLE</code>: The mutation makes the build fail.</li> </ul>"},{"location":"usage/configuration/","title":"Configuration","text":"<p>Gremlins can be configured via (in order of precedence):</p> <ol> <li>command flags</li> <li>environment variables</li> <li>configuration files</li> </ol>"},{"location":"usage/configuration/#command-flags","title":"Command flags","text":"<p>Flags have the higher priority and override all the other means of setting behaviours. Please refer to the specific command documentation to learn how to use them.</p>"},{"location":"usage/configuration/#configuration-files","title":"Configuration files","text":"<p>Gremlins can be configured with a configuration file.</p>"},{"location":"usage/configuration/#location","title":"Location","text":"<p>The configuration file can be placed in (in order of precedence)</p> <ol> <li><code>./.gremlins.yaml</code> (the current directory)</li> <li>The module root</li> <li><code>/etc/gremlins/.gremlins.yaml</code></li> <li><code>$XDG_CONFIG_HOME/gremlins/.gremlins.yaml</code></li> <li><code>$HOME/.gremlins.yaml</code></li> </ol> <p>Hint</p> <p><code>XDG_CONFIG_HOME</code> is usually <code>~/.config</code>.</p>"},{"location":"usage/configuration/#override","title":"Override","text":"<p>The config file can be overridden with the <code>--config</code> flag.</p> <pre><code>gremlins unleash --config=myConfig.yaml\n</code></pre>"},{"location":"usage/configuration/#reference","title":"Reference","text":"<p>Here is a complete configuration file with all the properties set to their defaults:</p> <pre><code>silent: false\nunleash:\n  integration: false\n  dry-run: false\n  tags: \"\"\n  output: \"\"\n  workers: 0 #(1)\n  test-cpu: 0 #(2)\n  timeout-coefficient: 0 #(3)\n  threshold: #(4)\n    efficacy: 0\n    mutant-coverage: 0\n\nmutants:\n  arithmetic-base:\n    enabled: true\n  conditionals-boundary:\n    enabled: true\n  conditionals-negation:\n    enabled: true\n  increment-decrement:\n    enabled: true\n  invert-assignments:\n    enabled: false\n  invert-bitwise:\n    enabled: false\n  invert-bwassign:\n    enabled: false\n  invert-negatives:\n    enabled: true\n  invert-logical:\n    enabled: false\n  invert-loopctrl:\n    enabled: false\n  remove-self-assignments:\n    enabled: false\n</code></pre> <ol> <li>By default <code>0</code>, which means that Gremlins will use the system CPUs number.</li> <li>By default <code>0</code>, which means that no test process CPU will be enforced.</li> <li>By default <code>0</code>, which means a default coefficient will be enforced.</li> <li>Thresholds are set by default to <code>0</code>, which means they are not enforced.</li> </ol> <p>For further information check the specific command documentation.</p> <p>Tip</p> <p>You can validate the configuration file using the provided JSON Schema (ex. using it in your editor). The schema can be found at https://gremlins.dev/next/schema/configuration.json. </p>"},{"location":"usage/configuration/#environment-variables","title":"Environment variables","text":"<p>Gremlins can be configured via environment variables as well. You can construct the variable name referring to the configuration file format. They start with <code>GREMLINS_</code>, and each dot and dash becomes an underscore.</p> <p>For example:</p> <pre><code>mutants:\n  arithmetic-base:\n    enabled: true\n</code></pre> <p>Can be set with:</p> <pre><code>export GREMLINS_MUTANTS_ARITHMETIC_BASE=true\n</code></pre>"},{"location":"usage/ci/docker/","title":"Docker","text":"<p>Gremlins can be used in CI pipelines using the prebuilt Docker images.</p>"},{"location":"usage/ci/docker/#as-a-pipeline-step","title":"As a pipeline step","text":"<p>In the continuous integration tool of your choice, you can execute a step using the following syntax:</p> <pre><code>docker run --rm -v $(pwd):/app -w /app gogremlins/gremlins:X.Y.Z gremlins unleash .\n</code></pre> <p>The exact way to specify a runner step in the pipeline script depends on the tool of choice.</p>"},{"location":"usage/ci/docker/#as-a-stage-in-the-dockerfile","title":"As a stage in the Dockerfile","text":"<p>Gremlins can be also run as a stage in the <code>Dockerfile</code>.</p> <pre><code>FROM gogremlins/gremlins:X.Y.Z AS mutation-testing\nWORKDIR /my/project/source\nRUN gremlins unleash\n</code></pre> <p>For further details, please refer to the Docker multi stage builds documentation.</p>"},{"location":"usage/ci/github-action/","title":"GitHub Action","text":"<p>Gremlins can be used in GitHub Actions through the official Run gremlins unleash action.</p>"},{"location":"usage/ci/github-action/#example-usage","title":"Example usage","text":"<pre><code>name: gremlins\n\non:\n  pull_request:\n  push:\n\njobs:\n  gremlins:\n    - uses: actions/checkout@v3\n    - uses: actions/setup-go@v3\n    - uses: go-gremlins/gremlins-action@v1\n      with:\n        version: latest\n        args: --tags=\"tag1,tag2\"\n        workdir: test/dir\n</code></pre>"},{"location":"usage/ci/github-action/#customization","title":"Customization","text":"Name Type Default Description <code>version</code><sup>1</sup> <code>string</code> <code>latest</code> Te version of Gremlins to use <code>args</code> <code>string</code> The command line arguments to pass to <code>gremlins unleash</code> <code>workdir</code> <code>string</code> <code>.</code> Working directory relative to repository root <ol> <li> <p>Can be <code>latest</code>, a fixed version like <code>v0.1.2</code> or a semver range like <code>~0.2</code>. In this case this will  return <code>v0.2.2</code>.\u00a0\u21a9</p> </li> </ol>"},{"location":"usage/commands/","title":"Gremlins","text":"<p>The <code>gremlins</code> command works with command and flags. Think of commands as verbs and flags as adjectives.</p> <pre><code>gremlins &lt;command&gt; [flags]\n</code></pre> <p>If you type</p> <pre><code>gremlins\n</code></pre> <p>a short usage summary will be printed.</p> <p>At any time, you can get further help writing</p> <pre><code>gremlins help &lt;command&gt;\n</code></pre>"},{"location":"usage/commands/#global-flags","title":"Global flags","text":"<p>Global flags are not command specific.</p>"},{"location":"usage/commands/#config","title":"Config","text":"<p><code>--config</code> \u00b7  Default: empty</p> <p>Overrides the configuration file.</p> <pre><code>gremlins &lt;command&gt; --config=config.yml\n</code></pre>"},{"location":"usage/commands/#silent","title":"Silent","text":"<p><code>--silent</code>/<code>-s</code> \u00b7  Default: false</p> <p>Makes Gremlins work in silent mode, which means only errors will be reported on STDOUT. This is useful in CI runs when you don't want to clutter the log, but just read the results from a file or check the exit error code in combination with a threshold configuration.</p> <p>Warning</p> <p>Note that Gremlins will be completely silent if there aren't errors, it doesn't mean it is unresponsive.</p> <pre><code>gremlins &lt;command&gt; --silent\n</code></pre>"},{"location":"usage/commands/unleash/","title":"Unleash","text":"<p>The main command used in Gremlins is <code>unleash</code>, that unleashes the gremlins and starts a mutation test of your code. If <code>unleash</code> is too long to type for you, you can use its aliases <code>run</code> and <code>r</code>.</p> <p>To execute a mutation testing run just type</p> <pre><code>gremlins unleash\n</code></pre> <p>If the module build requires tags</p> <pre><code>gremlins unleash --tags \"tag1,tag2\"\n</code></pre>"},{"location":"usage/commands/unleash/#flags","title":"Flags","text":"<p><code>unleash</code> supports several flags to fine tune its behaviour.</p>"},{"location":"usage/commands/unleash/#arithmetic-base","title":"Arithmetic base","text":"<p> <code>--arithmetic-base</code> \u00b7  Default: <code>true</code></p> <p>Enables/disables the ARITHMETIC BASE mutant type.</p> <pre><code>gremlins unleash --arithmetic-base=false\n</code></pre>"},{"location":"usage/commands/unleash/#conditionals-boundary","title":"Conditionals-boundary","text":"<p> <code>--conditionals-boundary</code> \u00b7  Default: <code>true</code></p> <p>Enables/disables the CONDITIONALS BOUNDARY mutant type.</p> <pre><code>gremlins unleash --conditionals_boundary=false\n</code></pre>"},{"location":"usage/commands/unleash/#conditionals-negation","title":"Conditionals negation","text":"<p> <code>--conditionals-negation</code> \u00b7  Default: <code>true</code></p> <p>Enables/disables the CONDITIONALS NEGATION mutant type.</p> <pre><code>gremlins unleash --conditionals_negation=false\n</code></pre>"},{"location":"usage/commands/unleash/#cover-packages","title":"Cover packages","text":"<p> <code>--coverpkg</code> \u00b7  Default: empty</p> <p>Apply coverage analysis in each test to packages matching the patterns. The default is for each test to analyze only the package being tested.</p> <pre><code>gremlins unleash --coverpkg \"./internal/...,./pkg/...\"\n</code></pre>"},{"location":"usage/commands/unleash/#diff","title":"Diff","text":"<p> <code>--diff</code> \u00b7  Default: empty</p> <p>Run tests only for mutants inside code changes between current state and git reference (branch or commit). The default is each mutant covered by tests.</p>"},{"location":"usage/commands/unleash/#branch-merge-base","title":"Branch merge base","text":"<pre><code>gremlins unleash --diff \"origin/main\"\n</code></pre>"},{"location":"usage/commands/unleash/#commit","title":"Commit","text":"<pre><code>gremlins unleash --diff \"b62af323\"\n</code></pre>"},{"location":"usage/commands/unleash/#pr","title":"PR","text":"<pre><code>gremlins unleash --diff \"origin/$GITHUB_BASE_REF\"\n</code></pre> <p>Use <code>actions/checkout@v4</code> with <code>fetch-depth: 0</code> to fetch all history.</p>"},{"location":"usage/commands/unleash/#using","title":"Using","text":""},{"location":"usage/commands/unleash/#dry-run","title":"Dry run","text":"<p><code>--dry-run</code>/<code>-d</code> \u00b7  Default: false</p> <p>Just performs the analysis but not the mutation testing.</p> <pre><code>gremlins unleash --dry-run\n</code></pre>"},{"location":"usage/commands/unleash/#increment-decrement","title":"Increment decrement","text":"<p> <code>--increment-decrement</code> \u00b7  Default: <code>true</code></p> <p>Enables/disables the INCREMENT DECREMENT mutant type.</p> <pre><code>gremlins unleash --increment-decrement=false\n</code></pre>"},{"location":"usage/commands/unleash/#integration-mode","title":"Integration mode","text":"<p><code>--integration</code>/<code>-i</code> \u00b7  Default: false</p> <p>In normal mode, Gremlins executes only the tests of the packages where the mutant is found. This is done to optimize the performance, running less test cases for each mutation.</p> <p>The drawback of this approach lies in the fact that if a mutation in a package influences the tests of another package, this is not caught by Gremlins. In general, this is an acceptable drawback because packages should rely on their own tests, not on the tests of other packages.</p> <p>Nonetheless, there may be cases where you may want to run all the test suite for each mutation, for example if you are analysing integration or E2E tests. In this scenario, you can enable integration mode. However, you should be aware that integration mode is generally much slower, and you can also get slightly different results depending on your test suite.</p> <pre><code>gremlins unleash --integration\n</code></pre>"},{"location":"usage/commands/unleash/#invert-assignments","title":"Invert assignments","text":"<p> <code>--invert-assignments</code> \u00b7  Default: <code>false</code></p> <p>Enables/disables the INVERT ASSIGNMENTS mutant type.</p> <pre><code>gremlins unleash --invert-assignments\n</code></pre>"},{"location":"usage/commands/unleash/#invert-bitwise","title":"Invert bitwise","text":"<p> <code>--invert-bitwise</code> \u00b7  Default: <code>false</code></p> <p>Enables/disables the INVERT BITWISE mutant type.</p> <pre><code>gremlins unleash --invert-bitwise\n</code></pre>"},{"location":"usage/commands/unleash/#invert-bitwise-assignments","title":"Invert bitwise assignments","text":"<p> <code>--invert-bwassign</code> \u00b7  Default: <code>false</code></p> <p>Enables/disables the INVERT BWASSIGN mutant type.</p> <pre><code>gremlins unleash --invert-bwassign\n</code></pre>"},{"location":"usage/commands/unleash/#invert-logical-operators","title":"Invert logical operators","text":"<p> <code>--invert-logical</code> \u00b7  Default: <code>false</code></p> <p>Enables/disables the INVERT LOGICAL mutant type.</p> <pre><code>gremlins unleash --invert_logical\n</code></pre>"},{"location":"usage/commands/unleash/#invert-loop-control","title":"Invert loop control","text":"<p> <code>--invert-loopctrl</code> \u00b7  Default: <code>false</code></p> <p>Enables/disables the INVERT LOOP mutant type.</p> <pre><code>gremlins unleash --invert-loopctrl\n</code></pre>"},{"location":"usage/commands/unleash/#invert-negatives","title":"Invert negatives","text":"<p> <code>--invert-negatives</code> \u00b7  Default: <code>true</code></p> <p>Enables/disables the INVERT NEGATIVES mutant type.</p> <pre><code>gremlins unleash --invert_negatives=false\n</code></pre>"},{"location":"usage/commands/unleash/#output","title":"Output","text":"<p> <code>--output</code>/<code>-o</code> \u00b7  Default: empty</p> <p>When set, Gremlins will write the give output file with machine readable results.</p> <pre><code>gremlins unleash --output=output.json\n</code></pre> <p>The output file in JSON format and has the following structure:</p> <pre><code>{\n  \"go_module\": \"github.com/go-gremlins/gremlins\",\n  \"test_efficacy\": 82.00,\n  //(1)\n  \"mutations_coverage\": 80.00,\n  //(2)\n  \"mutants_total\": 100,\n  \"mutants_killed\": 82,\n  \"mutants_lived\": 8,\n  \"mutants_not_viable\": 2,\n  //(3)\n  \"mutants_not_covered\": 10,\n  \"elapsed_time\": 123.456,\n  //(4)\n  \"files\": [\n    {\n      \"file_name\": \"myFile.go\",\n      \"mutations\": [\n        {\n          \"line\": 10,\n          \"column\": 8,\n          \"type\": \"CONDITIONALS_NEGATION\",\n          \"status\": \"KILLED\"\n        }\n      ]\n    }\n  ]\n}\n</code></pre> <ol> <li>This is a percentage expressed as floating point number.</li> <li>This is a percentage expressed as floating point number.</li> <li>NOT VIABLE mutants are excluded from all the calculations.</li> <li>The elapsed time is expressed in seconds, expressed as floating point number.</li> </ol> <p>Warning</p> <p>The JSON output file is not pretty printed; it is optimised for machine reading.</p>"},{"location":"usage/commands/unleash/#remove-self-assignments","title":"Remove self-assignments","text":"<p> <code>--remove-self-assignments</code> \u00b7  Default: <code>false</code></p> <p>Enables/disables the REMOVE_SELF ASSIGNMENTS mutant type.</p> <pre><code>gremlins unleash --remove-self-assignments\n</code></pre>"},{"location":"usage/commands/unleash/#tags","title":"Tags","text":"<p> <code>--tags</code>/<code>-t</code> \u00b7  Default: empty</p> <p>Sets the <code>go</code> command build tags.</p> <pre><code>gremlins unleash --tags \"tag1,tag2\"\n</code></pre>"},{"location":"usage/commands/unleash/#test-cpu","title":"Test CPU","text":"<p> <code>--test-cpu</code> \u00b7  Default: <code>0</code></p> <p>Tip</p> <p>To understand better the use of these flag, check workers</p> <p>This flag overrides the number of CPUs the Go test tool will utilize. By default, Gremlins doesn't set this value.</p> <pre><code>gremlins unleash --test-cpu=1\n</code></pre>"},{"location":"usage/commands/unleash/#threshold-efficacy","title":"Threshold efficacy","text":"<p> <code>--threshold-efficacy</code> \u00b7  Default: 0</p> <p>When set, it makes Gremlins exit with an error (code 10) if the test efficacy threshold is not met. By default it is zero, which means Gremlins never exits with an error.</p> <p>The test efficacy is calculated as <code>KILLED / (KILLED + LIVED)</code> and assesses how effective are the tests.</p> <pre><code>gremlins unleash --threshold-efficacy 80\n</code></pre>"},{"location":"usage/commands/unleash/#threshold-mutant-coverage","title":"Threshold mutant coverage","text":"<p> <code>--threshold-mcover</code> \u00b7  Default: 0</p> <p>When set, it makes Gremlins exit with an error (code 11) if the mutant coverage threshold is not met. By default it is zero, which means Gremlins never exits with an error.</p> <p>The mutant coverage is calculated as <code>(KILLED + LIVED) / (KILLED + LIVED + NOT_COVERED)</code> and assesses how many mutants are covered by tests.</p> <pre><code>gremlins unleash --threshold-mcover 80\n</code></pre>"},{"location":"usage/commands/unleash/#timeout-coefficient","title":"Timeout coefficient","text":"<p> <code>--timeout-coefficient</code> \u00b7  Default: <code>0</code></p> <p>Tip</p> <p>To understand better the use of these flag, check workers</p> <p>Gremlins determines the timeout for each Go test run by multiplying by a coefficient the time it took to perform the coverage run. It is possible to override this coefficient (<code>0</code> means use the default).</p> <pre><code>gremlins unleash --timeout-coefficient=3\n</code></pre>"},{"location":"usage/commands/unleash/#workers","title":"Workers","text":"<p> <code>--workers</code> \u00b7  Default: <code>0</code></p> <p>Tip</p> <p>To understand better the use of these flag, check workers</p> <p>Gremlins runs in parallel mode, which means that more than one test at a time will be performed, based on the number of CPU cores available.</p> <p>By default, Gremlins will use all the available CPU cores of, and , in integration mode, it will use half of the available CPU cores.</p> <p>The <code>--workers</code> flag allows to override the number of CPUs to use (<code>0</code> means use the default).</p> <pre><code>gremlins unleash --workers=4\n</code></pre>"},{"location":"usage/commands/unleash/workers/","title":"Workers","text":"<p>Gremlins works in parallel mode. It uses some sensible defaults, but it may be necessary to tweak them in your specific use case. Finding the correct settings mandates a little trial and error, and we are still learning how to get the most of it.</p> <p>The first setting you should be aware of is the number of workers (<code>--workers</code>). By default, Gremlins uses the number of available CPU cores. This value is correct most of the time, but if you notice an excessive number of mutations going into <code>TIMED OUT</code>, you may try to decrease this value.</p> <p>If you decrease this value, you may also try to increase the number of CPU cores available to each test run (<code>--test-cpu</code>). This is equivalent to the <code>-cpu</code> flag of the Go test tool, but for each mutation test. Gremlins doesn't enforce this by default.</p> <p>A rule of thumb may be setting it so that the sum of workers and test CPU is equal to the total number of cores of of the machine.</p> <p>The symptom of a run excessively stressed is the number of mutants going into <code>TIMED OUT</code>. You should tweak the two values above until your runs stabilize on a low and constant number of <code>TIMED OUT</code> mutants. To understand what could be your correct value, you can run Gremlins with a single worker and see the results.</p>"},{"location":"usage/commands/unleash/workers/#timeout-coefficient","title":"Timeout coefficient","text":"<p>Another setting you may want to tweak is the timeout coefficient. This is the multiplier used to increase the estimated time it takes to do a run of the tests. The default value should be ok, but if you see too much tests timing out, then you may try to play a little with this value. Don't increase it too much though, or the run might become excessively slow. At the moment, it defaults to 3.</p> <p>If your test suite takes a lot of time to run, you may want to tweak this setting to decrease the coefficient. We are thinking of a dynamic way to set this, but it is not clear yet the correct algorithm to use.</p>"},{"location":"usage/commands/unleash/workers/#integration-mode","title":"Integration mode","text":"<p>Integration mode is quite heavy on the CPU in parallel mode. For this reason, Gremlins halves the values for workers and test CPU if it is running in integration mode. So, if you set, for example, 4 workers, it will run effectively with 2. And same goes for test CPU.</p>"},{"location":"usage/mutations/","title":"About Mutations","text":"<p>Mutations are the core of Gremlins' activity. Each mutation belongs to a group that defines its flavour. These groups are called mutation types. Gremlins supports various mutation types, each comprising one or more mutations.</p> <p>When Gremlins scans the source code under test, it looks for mutations and for each found mutation creates a mutant. A mutant is the \"gremlin\" that actually changes the source code.</p> <p>Each mutant type can be enabled or disabled, and only a subset of mutations is enabled by default.</p> MutationType Default ARITHMETIC BASE YES CONDITIONALS BOUNDARY YES CONDITIONALS NEGATION YES INCREMENT DECREMENT YES INVERT NEGATIVES  YES INVERT LOGICAL  FALSE INVERT LOOP CTRL  FALSE INVERT ASSIGNMENTS  FALSE INVERT BITWISE  FALSE INVERT BWASSIGN  FALSE REMOVE_SELF_ASSIGNMENTS  FALSE"},{"location":"usage/mutations/arithmetic_base/","title":"Arithmetic base  default","text":"<p>Arithmetic base will perform inversions on basic arithmetic operations.</p>"},{"location":"usage/mutations/arithmetic_base/#mutation-table","title":"Mutation table","text":"Original Mutated + - - + * / / * % *"},{"location":"usage/mutations/arithmetic_base/#examples","title":"Examples","text":"OriginalMutated <pre><code>a := 1 + 2\n</code></pre> <pre><code>a := 1 - 2\n</code></pre>"},{"location":"usage/mutations/conditionals_boundary/","title":"Conditionals boundary  default","text":"<p>Conditionals boundaries modify the boundary of a conditional, which means that exclusive/inclusive ranges will be inverted.</p>"},{"location":"usage/mutations/conditionals_boundary/#mutation-table","title":"Mutation table","text":"Original Mutated &gt; &gt;= &gt;= &gt; &lt; &lt;= &lt;= &lt;"},{"location":"usage/mutations/conditionals_boundary/#examples","title":"Examples","text":"OriginalMutated <pre><code>if a &gt; b {\n  // Do something\n}\n</code></pre> <pre><code>if a &gt;= b {\n  // Do something\n}\n</code></pre>"},{"location":"usage/mutations/conditionals_negation/","title":"Conditionals negation  default","text":"<p>Conditionals negation inverts the conditional direction, which means a <code>==</code> will become a <code>!=</code>.</p>"},{"location":"usage/mutations/conditionals_negation/#mutation-table","title":"Mutation table","text":"Original Mutated == != != == &gt; &lt;= &lt;= &gt; &lt; &gt;= &gt;= &lt;"},{"location":"usage/mutations/conditionals_negation/#examples","title":"Examples","text":"OriginalMutated <pre><code>if a == b {\n  // Do something\n}\n</code></pre> <pre><code>if a != b {\n  // Do something\n}\n</code></pre>"},{"location":"usage/mutations/increment_decrement/","title":"Increment decrement  default","text":"<p>Increment decrement will invert the sign of the increment or decrement.</p>"},{"location":"usage/mutations/increment_decrement/#mutation-table","title":"Mutation table","text":"Original Mutated ++ -- -- ++"},{"location":"usage/mutations/increment_decrement/#examples","title":"Examples","text":"OriginalMutated <pre><code>for i := 0; i &lt; 10; i++ {\n  // Do something\n}\n</code></pre> <pre><code>for i := 0; i &lt; 10; i-- {\n  // Do something\n}\n</code></pre>"},{"location":"usage/mutations/invert_assignments/","title":"Invert assignments","text":"<p>Invert assignments will perform inversions on basic arithmetic operations, and it assigns the result of the two left and right operands to the left operand.</p>"},{"location":"usage/mutations/invert_assignments/#mutation-table","title":"Mutation table","text":"Original Mutated += -= -= += *= /= /= *= %= *="},{"location":"usage/mutations/invert_assignments/#examples","title":"Examples","text":"OriginalMutated <pre><code>a := 1\na *= 2\n</code></pre> <pre><code>a := 1\na /= 2\n</code></pre>"},{"location":"usage/mutations/invert_bitwise/","title":"Invert bitwise","text":"<p>Invert bitwise will perform inversions on basic bit operations.</p>"},{"location":"usage/mutations/invert_bitwise/#mutation-table","title":"Mutation table","text":"Original Mutated &amp; | | &amp; ^ &amp; &amp;^ &amp; &gt;&gt; &lt;&lt; &lt;&lt; &gt;&gt;"},{"location":"usage/mutations/invert_bitwise/#examples","title":"Examples","text":"OriginalMutated <pre><code>a := 1 &amp; 2\n</code></pre> <pre><code>a := 1 | 2\n</code></pre>"},{"location":"usage/mutations/invert_bitwise_assignments/","title":"Invert bitwise assignments","text":"<p>Invert bitwise assignments will perform inversions on basic bit operations, and it assigns the result of the two left and right operands to the left operand.</p>"},{"location":"usage/mutations/invert_bitwise_assignments/#mutation-table","title":"Mutation table","text":"Original Mutated &amp;= |= |= &amp;= ^= &amp;= &amp;^= &amp;= &gt;&gt;= &lt;&lt;= &lt;&lt;= &gt;&gt;="},{"location":"usage/mutations/invert_bitwise_assignments/#examples","title":"Examples","text":"OriginalMutated <pre><code>a := 1\na &amp;= 1\n</code></pre> <pre><code>a := 1\na |= 1\n</code></pre>"},{"location":"usage/mutations/invert_logical/","title":"Invert logical operators","text":"<p>Invert logical operators will perform inversions on logical operators.</p>"},{"location":"usage/mutations/invert_logical/#mutation-table","title":"Mutation table","text":"Orig Mutation &amp;&amp; || || &amp;&amp;"},{"location":"usage/mutations/invert_logical/#examples","title":"Examples","text":"OriginalMutated <pre><code>a := true &amp;&amp; false\n</code></pre> <pre><code>a := true || false\n</code></pre>"},{"location":"usage/mutations/invert_loop/","title":"Invert loop control","text":"<p>Invert loop control will perform inversions on control operations, which means a <code>continue</code> will become a <code>break</code>.</p>"},{"location":"usage/mutations/invert_loop/#mutation-table","title":"Mutation table","text":"Orig Mutation continue break break continue"},{"location":"usage/mutations/invert_loop/#examples","title":"Examples","text":"OriginalMutated <pre><code>for i := 0; i &lt; 3; i++ {\n    continue\n}\n</code></pre> <pre><code>for i := 0; i &lt; 3; i++ {\n    break\n}\n</code></pre>"},{"location":"usage/mutations/invert_negatives/","title":"Invert negatives   default","text":"<p>Invert negatives will invert the sign of negative numbers, making them positive.</p>"},{"location":"usage/mutations/invert_negatives/#mutation-table","title":"Mutation table","text":"Original Mutated - +"},{"location":"usage/mutations/invert_negatives/#examples","title":"Examples","text":"OriginalMutated <pre><code>func makeNegative(i int) int {\n  return -i\n}\n</code></pre> <pre><code>func makeNegative(i int) int {\n  return +i\n}\n</code></pre>"},{"location":"usage/mutations/remove_self_assignments/","title":"Remove self-assignments","text":"<p>Remove self-assignments will perform a trivial assignment, instead of assigning the result of the two left and right operands to the left operand.</p>"},{"location":"usage/mutations/remove_self_assignments/#mutation-table","title":"Mutation table","text":"Original Mutated += = -= = *= = /= = %= = &amp;= = |= = ^= = &lt;&lt;= = &gt;&gt;= = &amp;^= ="},{"location":"usage/mutations/remove_self_assignments/#examples","title":"Examples","text":"OriginalMutated <pre><code>a := 1\na += 2\n</code></pre> <pre><code>a := 1\na = 2\n</code></pre>"}]}